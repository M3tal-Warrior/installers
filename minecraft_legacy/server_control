#!/bin/bash

# ================================= Copyright =================================
# Version 1.3 (2012-11-14), Copyright (C) 2011-2012
# Author: M3tal_Warrior (http://www.minecraftwiki.net/wiki/User:M3tal_Warrior)

#   This script is free software: you can redistribute it and/or modify it 
#   under the terms of the GNU General Public License as published by the 
#   Free Software Foundation, either version 3 of the License, or any later 
#   version.
#   This program is distributed in the hope that it will be useful, but 
#   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
#   or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
#   for more details.

#   As this is only a script, theres no copy of the GNU General Public License 
#   distributed along with this script.
#   See <http://www.gnu.org/licenses/> for the licence text.

VERSION="1.3"

# ================================== Settings =================================
# Settings are inherited from the invocation script

# ================================== Modules ==================================
# The script is highly modular to allow for fast and effective modification by
# the server admin. 

# --------------------- Server command processing section ---------------------
# These commands prepare for direct interaction with the minecraft server by 
# using the buildin commands. Every such module name starts with mcc_.

# Interaction (in and out) itself is processed by mcc_pipe.
mcc_pipe() {
  screen -p 0 -S minecraft -X eval "stuff \"$PIPE\"\015"
  MCNOW=`date +"%Y-%m-%d %H:%M:%S"`
}

# Save all changes to the server files
mcc_saveall() {
  PIPE="save-all"
  mcc_pipe
}

# Prohibit the server saving to its files
mcc_saveoff() {
  PIPE="save-off"
  mcc_pipe
}

# Allow the server saving to its files
mcc_saveon() {
  PIPE="save-on"
  mcc_pipe
}

# Sends a console message out
mcc_say() {
  if [ "$VALUE1" ]
    then 
      PIPE="say $VALUE1"
      mcc_pipe
    else
      echo "Must specify what to say!"
      exit 1
  fi
}

# Gracefully shuts down the server
mcc_stop() {
  PIPE="stop"
  mcc_pipe
}

# Give named player a defined while (theoretically) unlimited number of items/
# blocks with given damage value. Note: If you type in 2 damage values, the 
# script will give the player for every damage value within the range the 
# number of items/blocks chosen, regardless of existance. BE CAREFUL!
mcc_give() {
  if [ "$VALUE2" = "" ]
    then 
      echo "Command is:" 
      echo "’give <player> <item_nr (DEC)> <amount> <damage_start> <damage_end>'"
      echo "Player and item number are mandatory."
      exit 1
  fi
  if [ "$VALUE3" = "" ]
    then VALUE3=1
  fi
  MULT=$(( $VALUE3 / 64 ))
  REST=$(( $VALUE3 % 64 ))
  if [ "$VALUE4" ]
    then
      DAMAGE="$VALUE4"
      if [ "$VALUE5" ]
        then 
          while [ "$DAMAGE" -le "$VALUE5" ]
            do
              case $SERVERTYPE in
                Vanilla)
                  while [ "$MULT" -ge "0" ]
                    do 
                      if [ "$MULT" = "0" ]
                        then VALUE3="$REST"
                        else VALUE3="64"
                      fi
                      MULT=$(( $MULT - 1 ))
                      PIPE="give $VALUE1 $VALUE2 $VALUE3 $DAMAGE"
                      mcc_pipe
                    done
                  ;;
                Bukkit)
                  PIPE="give $VALUE1 $VALUE2:$DAMAGE $VALUE3"
                  mcc_pipe
                  ;;
                *)
                  echo "Wrong variable set (SERVERTYPE)! Aborting..."
                  exit 1
                  ;;
              esac
              DAMAGE=$(( $DAMAGE + 1 ))
            done
        else 
          case $SERVERTYPE in
            Vanilla)
              while [ "$MULT" -ge "0" ]
                do 
                  if [ "$MULT" = "0" ]
                    then VALUE3="$REST"
                    else VALUE3="64"
                  fi
                  MULT=$(( $MULT - 1 ))
                  PIPE="give $VALUE1 $VALUE2 $VALUE3 $DAMAGE"
                  mcc_pipe
                done
              ;;
            Bukkit)
              PIPE="give $VALUE1 $VALUE2:$DAMAGE $VALUE3"
              mcc_pipe
              ;;
            *)
              echo "Wrong variable set (SERVERTYPE)! Aborting..."
              exit 1
              ;;
          esac
      fi
    else
      case $SERVERTYPE in
        Vanilla)
          while [ "$MULT" -ge "0" ]
            do 
              if [ "$MULT" = "0" ]
                then VALUE3="$REST"
                else VALUE3="64"
              fi
              MULT=$(( $MULT - 1 ))
              PIPE="give $VALUE1 $VALUE2 $VALUE3"
              mcc_pipe
            done
          ;;
        Bukkit)
          PIPE="give $VALUE1 $VALUE2 $VALUE3"
          mcc_pipe
          ;;
        *)
          echo "Wrong variable set (SERVERTYPE)! Aborting..."
          exit 1
          ;;
      esac
  fi
}

# Gives named player a defined while (theoretically) unlimited amount of 
# experience orbs
mcc_xp() {
  if [ "$VALUE2" = "" ]
    then 
      echo "Command is:" 
      echo "’xp <player> <amount>’"
      echo "Player and amount are mandatory."
      exit 1
  fi
  MULT=$(( $VALUE2 / 5000 ))
  REST=$(( $VALUE2 % 5000 ))
  while [ "$MULT" -ge "0" ]
    do
      if [ "$MULT" = "0" ]
        then VALUE2="$REST"
        else VALUE2="5000"
      fi
      MULT=$(( $MULT - 1 ))
      PIPE="xp $VALUE1 $VALUE2"
      mcc_pipe
    done
}

# --------------------- General command processing section --------------------
# These modules are for managing the server itself and its environment. Some of
# them use the modules above, but not all of them. Every module in here has mc_
# as prefix.

# Checks if the server is running
mc_check() {
  if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
    then CHECK="1"
    else CHECK=""
  fi
}

# Checks if the server is running and exits if not
mc_critcheck() {
  mc_check
  if [ "$CHECK" = "" ]
    then 
      if [ "$CRON" != "1" ]
        then echo "$SERVICE is not running - exiting..."
      fi
      exit 1
  fi
}
# Prints the console feedback of the command piped to the server
mc_feedback() {
  sleep 1
  cat "$MCPATH/server.log" | grep "$MCNOW"
}

# Manages the RAMFS option
mc_upramfs() {
  if [ "$USE_RAMFS" = "yes" ]
    then
      mkdir -p $RAMPATH
      echo "Copying files to RAMFS..."
      rsync -ahu $SERVERPATH/ $RAMPATH
      SERVERSIZE=`du -sh $RAMPATH | gawk '{print $1}'`
      echo "$SERVERSIZE in total done."
  fi
}

# Starts the server 
mc_start() {
  echo "Starting $SERVICE..."
  cd $MCPATH
  screen -dmS minecraft $INVOCATION
  COUNTDOWN="0"
  while [ "$COUNTDOWN" -le 20 ]
    do
      sleep 1
      mc_check
      if [ "$CHECK" = "" ]
        then COUNTDOWN=$(( $COUNTDOWN + 1 ))
        else COUNTDOWN="121"
      fi
    done
  if [ "$CHECK" = "1" ]
    then
      echo "$SERVICE is now started, but may need some time to be fully operational."
    else
      echo "Error! Could not start $SERVICE!"
      exit 1
  fi
}

# Shuts the server down
mc_stop() {
  echo "Stopping $SERVICE"
  VALUE1="SERVER SHUTTING DOWN IN 10 SECONDS."
  mcc_say
  mcc_saveall
  sleep 10
  mcc_stop
  COUNTDOWN="0"
  while [ "$COUNTDOWN" -le 20 ]
    do
      sleep 1
      mc_check
      if [ "$CHECK" = "1" ]
        then COUNTDOWN=$(( $COUNTDOWN + 1 ))
        else COUNTDOWN="121"
      fi
    done
  if [ "$CHECK" = "1" ]
    then 
      echo "Error! $SERVICE could not be stopped."
      exit 1
    else
      sleep 2
      echo "$SERVICE is now stopped."
  fi
}

# Writes the files in RAMFS back to harddisk
mc_saveback() {
  if [ "$USE_RAMFS" = "yes" ]
    then
      SERVERSIZE=`du -sh $RAMPATH | awk '{print $1}'`
      echo "Incremental save of $SERVERSIZE to harddisk..."
      rsync -ahu $RAMPATH/ $SERVERPATH
      echo "Done."
  fi
  sync
}

# Disables the server saving to its files
mc_saveoff() {
  if [ "$CRON" != "1" ]
    then
      echo "$SERVICE is running... suspending saves"
      VALUE1="Server going readonly..."
      mcc_say
  fi
  mcc_saveoff
  mcc_saveall
  sync
  if [ "$USE_RAMFS" = "yes" ]
    then sleep 1
    else sleep 10
  fi      
}

# Enables the server saving to its files
mc_saveon() {
  if [ "$CRON" != "1" ]
    then 
      echo "$SERVICE is running... re-enabling saves"
      VALUE1="Server going read-write..."
      mcc_say
  fi
  mcc_saveon
}

# Copys the harddisk files to backup directory
mc_backup() {
  if [ "$CRON" != "1" ]
    then
      echo "Backing up minecraft server..."
  fi
  rsync -ahu $SERVERPATH/ $BACKUPPATH/server_`date "+%Y.%m.%d_%H.%M"`
  if [ "$CRON" != "1" ]
    then
      echo "Backup complete!"
  fi
}

# Raw processing of some special commands and piping the rest
mc_do() {
  COMMAND="$1"
  VALUE1="$2"
  VALUE2="$3"
  VALUE3="$4"
  VALUE4="$5"
  VALUE5="$6"
  case "$COMMAND" in
    give)
      mcc_give
      ;;
    xp)
      mcc_xp
      ;;
    *)
      PIPE="$*"
      mcc_pipe
      ;;
  esac
}

# ............ Update subsection ............
# Processes all update interaction with the user,
# the script invocating and the update itself.

# Pre-replacement checking and processing
mc_updt_critical() {
  if [ "$UPDT_ERROR" != "0" ]
    then 
      echo "Can't do stuff without that file! Aborting..."
      cd
      rm -rf $TEMPPATH
      exit 1
  fi

}
# Processing updates requiring root access (script files)
mc_updt_prepare() {
  UPDT_CHANGES=$(( $UPDT_CHANGES + 1 ))
  echo "sudo chown root:root $UPDT_NEWPATH/$UPDT_NEWFILE
sudo chmod $MOD $UPDT_NEWPATH/$UPDT_NEWFILE
if [ -f $UPDT_OLDPATH/$UPDT_OLDFILE ]
  then sudo mv $UPDT_OLDPATH/$UPDT_OLDFILE $TEMPPATH/$UPDT_OLDFILE.old
fi
sudo mv $UPDT_NEWPATH/$UPDT_NEWFILE $UPDT_OLDPATH/$UPDT_OLDFILE" >> $TEMPPATH/mc_updater.sh
  echo "Done."
}

# Checking for file integrity with diff and version comparison
mc_updt_integrity() {
  if `diff $UPDT_OLDPATH/$UPDT_OLDFILE $UPDT_NEWPATH/$UPDT_NEWFILE > /dev/null`
    then
      echo "File up to date."
      if [ "$UPDT_NEWFILE" != "updateurls.conf" ]
        then rm $UPDT_NEWPATH/$UPDT_NEWFILE
      fi
    else
      UPDT_OLDVERSION=`cat "$UPDT_OLDPATH/$UPDT_OLDFILE" | grep -m 1 "VERSION=" | cut -d '"' -f 2 -s`
      UPDT_NEWVERSION=`cat "$UPDT_NEWPATH/$UPDT_NEWFILE" | grep -m 1 "VERSION=" | cut -d '"' -f 2 -s`
      UPDT_VERSION_C=`echo "$UPDT_NEWVERSION>$UPDT_OLDVERSION" | bc`
      if [ "$UPDT_VERSION_C" = "1" ]
        then
          echo "Preparing update..."
        else
          UPDT_VERSION_C=`echo "$UPDT_NEWVERSION==$UPDT_OLDVERSION" | bc`
          echo "Downloaded version number of 
$UPDT_FILE"
          if [ "$UPDT_VERSION_C" = "1" ]
            then echo "is IDENTICAL, but the files are different!"
            else echo "is OLDER - that should be IMPOSSIBLE!"
          fi
          echo "This might indicate a security breach or unauthorized manipulation. 
Update halted for you to investigate...
[ Press ENTER to continue ]"
          read UPDT_HALT
          echo "Preparing replace..."
      fi
      mc_updt_prepare
  fi
}

# Processes download and presence checks
mc_updt_download() {
  echo "
Processing $UPDT_FILE..."
  cd $TEMPPATH
  wget -q $UPDT_URL
  UPDT_NEWPATH="$TEMPPATH"
  UPDT_NEWFILE=`basename $UPDT_URL`
  UPDT_OLDPATH="$UPDT_PATH"
  UPDT_OLDFILE="$UPDT_FILE"
  if [ -f $UPDT_NEWPATH/$UPDT_NEWFILE ]
    then
      if [ -f $UPDT_OLDPATH/$UPDT_OLDFILE ]
        then 
          case $UPDT_TYPE in
            bin)
              # Server
              if `diff $UPDT_OLDPATH/$UPDT_OLDFILE $UPDT_NEWPATH/$UPDT_NEWFILE > /dev/null`
                then
                  echo "File up to date."
                  rm $UPDT_NEWPATH/$UPDT_NEWFILE
                else
                  echo "Processing update..."
                  UPDT_CHANGES=$(( $UPDT_CHANGES + 1 ))
              fi
              ;;
            config)
              # Config files which are not to be edited by anyone,
              # i.e. updateurls.conf
              MOD="644"
              mc_updt_integrity
              ;;
            core)
              # Core files are autoconf.sh (the init writer) and server_control
              MOD="755"
              mc_updt_integrity
              ;;
            edit)
              # All editable config files (currently none)
              MOD="644"
              UPDT_OLDVERSION=`cat "$UPDT_OLDPATH/$UPDT_OLDFILE" | grep -m 1 "VERSION=" | cut -d '"' -f 2 -s`
              UPDT_NEWVERSION=`cat "$UPDT_NEWPATH/$UPDT_NEWFILE" | grep -m 1 "VERSION=" | cut -d '"' -f 2 -s`
              UPDT_VERSION_C=`echo "$UPDT_NEWVERSION>$UPDT_OLDVERSION" | bc`
              if [ "$UPDT_VERSION_C" = "1" ]
                then
                  echo "This seems to be a syntax update. Old files have to be converted manually."
                  echo "[ Press ENTER to continue ]"
                  read UPDT_HALT
                  cp $UPDT_OLDPATH/$UPDT_OLDFILE $UPDT_OLDPATH/$UPDT_OLDFILE.old
                  echo "Backup done."
                  echo "Preparing update..."
                  mc_updt_prepare
              fi
              ;;
          esac
        else
          echo "Preparing install..."
          mc_updt_prepare
      fi 
    else
      echo "Couldn't download new version of $UPDT_OLDFILE - try again later!"
      UPDT_ERROR=$(( $UPDT_ERROR + 1 ))
  fi
}

# Preparing environment and crucial files
mc_updt_step1() {
  if [ "$SERVERTYPE" != "BUKKIT" -a "$SERVERTYPE" != "VANILLA" ]
    then
      echo "Invalid SERVERTYPE set! Aborting..."
      exit 1
  fi
  UPDT_ERROR="0"
  UPDT_CHANGES="0"
  # Creating temporary update path
  TEMPPATH=/dev/shm/mc_update.tmp.`date "+%Y.%m.%d_%H.%M"`
  echo "Removing files that shouldn't be there anyway, to ensure secure environment..."
  rm -rf $TEMPPATH
  if [ -d $TEMPPATH ]
    then 
      echo "Something is weird here - check your environment for security breaches!"
      exit 1
  fi
  mkdir $TEMPPATH
  # Preparing updater script beginnings
  echo "#!/bin/bash
TEMPPATH=\"$TEMPPATH\"" > $TEMPPATH/mc_updater.sh
  chmod a+x $TEMPPATH/mc_updater.sh
  # Checking for update URLs file
  cd $CONFIG_PATH
  if [ -f $UPDATE_CONF ]
    then
      URL_UPDATE_CONF=`cat "$UPDATE_CONF" | grep "UPDATE_CONF" | cut -d '"' -f 2 -s`
    else
      echo "Can't find $UPDATE_CONF! Can't find download locations without! Aborting..."
      exit 1
  fi
  # Getting new update URLs file
  cd $TEMPPATH
  UPDT_PATH="$CONFIG_PATH"
  UPDT_FILE="$UPDATE_CONF"
  UPDT_TYPE="config"
  UPDT_URL="$URL_UPDATE_CONF"
  mc_updt_download
  mc_updt_critical
  # Reading freshly downloaded config for maintenance and autoconfig script
  URL_MAINTAIN_SCRIPT=`cat "$UPDT_NEWPATH/$UPDT_NEWFILE" | grep "MAINTAIN_SCRIPT" | cut -d '"' -f 2 -s`
  URL_AUTOCONF=`cat "updateurls.conf" | grep "AUTOCONF" | cut -d '"' -f 2 -s`
  # Downloading new maintenance script
  cd $TEMPPATH
  UPDT_PATH="$MAINTAIN_SCRIPT_PATH"
  UPDT_FILE="$MAINTAIN_SCRIPT_NAME"
  UPDT_TYPE="core"
  UPDT_URL="$URL_MAINTAIN_SCRIPT"
  mc_updt_download
  mc_updt_critical
  if [ -f $TEMPPATH/server_control ]
    then chmod a+x $TEMPPATH/server_control
  fi
  # Downloading new autoconf script
  cd $TEMPPATH
  UPDT_PATH="$CONFIG_PATH"
  UPDT_FILE="$AUTOCONF"
  UPDT_TYPE="core"
  UPDT_URL="$URL_AUTOCONF"
  mc_updt_download
  mc_updt_critical
  if [ -f $TEMPPATH/autoconf.sh ]
    then
      # Invocating autoconf script
      chmod a+x $TEMPPATH/autoconf.sh
      export INITNAME
      export NEWINIT="init"
      export INSTALL
      export UPDATE="1"
      export MCUSERNAME
      export SUDOER
      export TEMPPATH
      bash -c $TEMPPATH/autoconf.sh
      INST_RETURN="$?"
      echo ""
      case $INST_RETURN in
        0) 
          echo "Initscript created."
          echo ""
          UPDT_INIT="1"  
          # Parsing new init script for a modified temporary initializer for update
          # step 2
          echo "#!/bin/bash" > $TEMPPATH/mod_init.sh
          chmod a+x $TEMPPATH/mod_init.sh
          cat "$TEMPPATH/$NEWINIT" | grep -A 100 "# General settings" | grep -B 100 "Install invocation" >> $TEMPPATH/mod_init.sh
          echo "export TEMPPATH=\"$TEMPPATH\"
export UPDT_STEP=\"2\"
export UPDT_CHANGES=\"$UPDT_CHANGES\"
bash -c \"$TEMPPATH/server_control update\"
UPDT_RETURN=\"$?\"
if [ \"$UPDT_RETURN\" != \"0\" ]
  then 
    exit 1
fi
exit 0" >> $TEMPPATH/mod_init.sh
          ;;
        2)
          # This applies when autoconf.sh detects an up to date init file
          UPDT_INIT="0"
          ;;
        *)
          echo "Something went terribly wrong during the procedure - can't continue!"
          echo ""
          exit 1
          ;;
      esac
    else UPDT_INIT="0"
  fi
} 

# Preparing update of all files
mc_updt_step2() {
  # Environment checks
  if [ ! -d $TEMPPATH ]
    then
      echo "TEMPPATH couldn't be found! Aborting..."
      exit 1
    else cd $TEMPPATH
  fi
  if [ ! -x mc_updater.sh ]
    then
      echo "mc_updater.sh couldn't be found or isn't executable! Aborting..."
      cd
      rm -rf $TEMPPATH
      exit 1
  fi
  if [ ! -f updateurls.conf ]
    then
      echo "UpdateURLs config file couldn't be found! Aborting..."
      cd
      rm -rf $TEMPPATH
      exit 1
  fi
  # Reading in all update urls
  URL_CMDGRID_CONF=`cat "updateurls.conf" | grep "CMDGRID_CONF" | cut -d '"' -f 2 -s`

  # Getting files
  UPDT_PATH="$CONFIG_PATH"
  UPDT_FILE="$CMDGRID_CONF"
  UPDT_TYPE="edit"
  UPDT_URL="$URL_CMDGRID_CONF"
  mc_updt_download

  # Writing last sections of mc_updater.sh
  echo "echo \"All script files updated!\"
cd
export INSTALL='3'
bash -c /etc/init.d/$INITNAME
exit 0" >> $TEMPPATH/mc_updater.sh
  # Writing cleaner & checkup script mc_lastrites.sh
  echo "#!/bin/bash
TEMPPATH=\"$TEMPPATH\"
SCRIPTBACKUP=\"\$BACKUPPATH/scripts_\`date \"+%Y.%m.%d_%H.%M\"\`\" 
sudo mkdir -p \$SCRIPTBACKUP
cd $TEMPPATH
sudo rm -f updateurls.conf
sudo rm -f mc_initupdate.sh
sudo rm -f mc_updater.sh
cd /dev/shm
sudo mv $TEMPPATH \$SCRIPTBACKUP
if [ -f /etc/init.d/$INITNAME ]
  then
    echo \"Reactor online...\"
    sleep 1
  else
    echo \"Initscript not found - Bail out! Bail out!\"
    exit 1
fi
if [ -f \$MAINTAIN_SCRIPT_PATH/\$MAINTAIN_SCRIPT_NAME ]
  then
    echo \"Sensors online...\"
    sleep 1
  else
    echo \"Maintenance script not found - Bail out! Bail out!\"
    exit 1
fi
if [ -f \$SERVERPATH/\$SERVICE ]
  then
    echo \"Weapons online...\"
    sleep 1
  else
    echo \"Binary not found - Bail out! Bail out!\"
    exit 1
fi
export INSTALL='0'
LAUNCH=\$(bash -c \"/etc/init.d/$INITNAME status\" | grep -c \"is running.\")
if [ \"$LAUNCH\" = \"1\" ]
  then
    sleep 1
    echo \"All systems nominal!\"
    sleep 1
    echo \"Now everything lies in your hands again, lance leader!\"
    sleep 4
  else
    echo \"Systems failure - ! SERVER DOWN ! - state critical - Bail out! Bail out!\"
    exit 1
fi
exit 0" > /dev/shm/mc_lastrites.sh
  chmod a+x /dev/shm/mc_lastrites.sh
  if [ "$UPDT_CHANGES" = "0" ]
    then
      echo "All scripts up to date."
      rm -r $TEMPPATH
      rm /dev/shm/mc_lastrites.sh
      UPDT_RETURN="0"
  elif [ "$SUDOER" = "yes" ]
    then
      bash -c $TEMPPATH/mc_initupdater.sh
      UPDT_RETURN="$?"
    else 
      echo "Please provide user with root permissions to update script files:"
      read UPDT_USER
      su $UPDT_USER -c "$TEMPPATH/mc_initupdater.sh"
      UPDT_RETURN="$?"
  fi
  if [ "$UPDT_RETURN" != "0" ]
    then 
      echo "#!/bin/bash
bash -c $TEMPPATH/mc_initupdater.sh
if [ \"\$?\" != \"0\" ]
  then
    echo \"There is no way to do these operations without sudoer rights! Aborting...\"
    exit 1
fi
echo \"Proceeding with binaries...\"
if [ \"\$USER\" != \"root\" -a \"\$USER\" != \"$MCUSERNAME\" ]
  then echo \"Password asked for is the user password of $MCUSERNAME.\"
fi
bash -c \"/etc/init.d/$INITNAME binupdate\"
rm /dev/shm/mc_startupdate.sh
rm 
exit 0" > /dev/shm/mc_startupdate.sh
      chmod a+x /dev/shm/mc_startupdate.sh
      echo "Something went wrong! Aborting..."
      echo "To resume this update by a sudoer user go to /dev/shm and invocate 
mc_startupdate.sh. It will do the rest as if nothing went wrong."
      exit 1
    else echo "Proceeding with binaries..."
  fi

}

# Doing all binaries
mc_updt_step3() {
  UPDT_CHANGES="0"
  TEMPPATH=/dev/shm/mc_update.tmp.`date "+%Y.%m.%d_%H.%M"`
  mkdir -p $TEMPPATH
  cd $CONFIG_PATH
  URL_SERVICE=`cat "$UPDATE_CONF" | grep "$SERVERTYPE" | cut -d '"' -f 2 -s`
  # Downloading server binary
  UPDT_PATH="$MCPATH"
  UPDT_FILE="$SERVICE"
  UPDT_TYPE="bin"
  UPDT_URL="$URL_SERVICE"
  mc_updt_download
  if [ "$UPDT_CHANGES" != "0" ]
    then
      mc_check
      if [ "$CHECK" ]
        then 
          mc_stop
          mc_saveback
      fi
      mc_backup
      mv $UPDT_NEWPATH/$UPDT_NEWFILE $UPDT_OLDPATH/$UPDT_OLDFILE
      mc_start
    echo "Server binary successfully updated and started."
  fi
}

# Main update controller
mc_update() {
  case $UPDT_STEP in
    2)
      # This is only invocated if the init file version has changed
      mc_updt_step2
      exit 0
      ;;
    3)
      # This is invocated to update the server binary
      mc_updt_step3
      ;;
    *)
      # Doing the whole updating process
      mc_updt_step1
      if [ "$UPDT_INIT" = "1" ]
        then bash -c $TEMPPATH/mod_init.sh
        else mc_updt_step2
      fi
      mc_updt_step3
      echo "All update actions completed."
      ;;
  esac
}
# ............ Log chopup subsection ............
# Processes all log reprocessing actions for clean
# logfiles to backup lateron

# Copys the server.log for further processing and clears it afterwards
mc_newlog() {
  cd $MCPATH
  cp server.log server.log.tmp
  echo -n "" > server.log
}

# Processes the server.log copy into specialized logfiles
mc_clearlog() {
  cd $MCPATH
  if [ -f server.log.tmp ]
    then 
      cat server.log.tmp | grep -v "94.231.101.83" | \
        grep -v "CONSOLE: Disabling level saving.." | \
        grep -v "CONSOLE: Forcing save.." | \
        grep -v "CONSOLE: Save complete." | \
        grep -v "CONSOLE: Enabling level saving.." > server.log.`date "+%Y.%m.%d"`
      cat server.log.tmp | grep "not white-listed" >> forbidden.log
      cat server.log.tmp | grep "WARNING" | \
        grep -v "Can't keep up! Did the server time change" >> warnings.log
      rm server.log.tmp
  fi
}

# ............ Rollback subsection ............
# Processes all rollback interaction with the user
# and the rollback itself.

# Sanity check for "directory" mode of rollback
mc_rbdir() {
  RB_UNDO="0"
  if [ -d $1 ]
    then ROLLBACK_FROM=${1%/}
    else 
      echo "Can't find directory, aborting..."
      exit 1
  fi
}
# Sanity check for "last" mode of rollback and selection of source directory
mc_rblast() {
  RB_UNDO="0"
  if [ ! "$1" ]
    then RB_NUM="1"
    else 
      if [[ "$1" = ?(+|-)+([0-9]) ]]
        then RB_NUM="$1"
        else 
          echo "No number given, aborting..."
          exit 1
      fi
  fi
  cd $BACKUPPATH
  BACKUPDIR=$(ls -1 | grep "server_" | tail -n $RB_NUM | head -n 1)
  ROLLBACK_FROM="$BACKUPPATH/$BACKUPDIR"
}

# Directory selection for "sel" mode of rollback
mc_rbsel() {
  RB_UNDO="0"
  cd $BACKUPPATH
  while [ "$SELECTION" != "1" ] 
    do 
      echo `ls -1 | grep "server_"`
      echo "Type in the directory to use:"
      read BACKUPDIR
      SELECTION=$(ls -1 | grep -c $BACKUPDIR)
      if [ $SELECTION = "0" ]
        then echo "Search pattern has no matching directory!"
      fi
      if [ $SELECTION -gt "1" ]
        then echo "Search pattern has too many matching directories!"
      fi
    done
  BACKUPDIR=$(ls -1 | grep $BACKUPDIR)
  ROLLBACK_FROM=$BACKUPPATH/$BACKUPDIR
}

# Setting "undo rollback" variables
mc_rbundo() {
  RB_UNDO="1"
  ROLLBACK_FROM="$BACKUPPATH/rb_undo"
}

# Affirmation and rollback/undo procedure
mc_rollback() {
  if [ "$ROLLBACK_FROM" = "$BACKUPPATH/rb_undo" -a "$RB_UNDO" = "0" ]
    then 
      echo "You can't undo a rollback this way! Use ’rollback undo’ instead!"
      exit 1
  fi
  if [ "$RB_UNDO" = "1" ]
    then
      echo "Do you really want to undo your last rollback? (y/n)"
      read OKAY
      RB_MSG1="Undo"
      RB_MSG2="undo"
      RB_MSG3="Undo previous rollback..."
      RB_MSG4="Previous changes to the server successfully undone."
    else
      echo "If you want to undo a rollback, use ’rollback undo’, for anything else"
      echo "WILL OVERWRITE the last undo snapshot!"
      echo "You really want to roll back to the snapshot $ROLLBACK_FROM? (y/n)"
      read OKAY
      RB_MSG1="Rollback"
      RB_MSG2="rollback"
      RB_MSG3="Rolling back..."
      RB_MSG4="Server successfully rolled back to desired date."
  fi
  if [ "$OKAY" != "y" ]
    then
      echo "$RB_MSG1 aborted - nothing was changed."
      exit 0
  fi
  echo "Launching $RB_MSG2 procedure..."
  mc_check
  if [ "$CHECK" ]
    then 
      mc_stop
      mc_saveback
  fi
  if [ "$RB_UNDO" = "0" ]
    then 
      echo "Sweeping old undo cache..."
      rm -rf $BACKUPPATH/rb_undo
      echo "Done."
      echo "Writing new undo cache..."
      mkdir -p $BACKUPPATH/rb_undo
      rsync -ahu $SERVERPATH/ $BACKUPPATH/rb_undo
      echo "Done."
  fi
  if [ "$USE_RAMFS" = "yes" ]
    then
      echo "Sweeping RAMFS..."
      cd $RAMPATH
      rm -rf *
      echo "Done."
  fi
  echo "Sweeping server path..."
  cd $SERVERPATH
  rm -rf *
  echo "Done."
  echo "$RB_MSG3"
  rsync -ahu $ROLLBACK_FROM/ $SERVERPATH
  echo "Done. Beginning launch procedure..."
  mc_upramfs
  mc_start
  echo "$RB_MSG4"
  echo "You may need to update the binaries with buildin update command."
}

# Displays the available rollback commands
mc_rbhelp() {
  echo "Command syntax:" 
  echo "’rollback dir <directory>’"
  echo "   Use named directory as new server"
  echo "’rollback last <number>’"
  echo "   Rolls back <number> of backups to use as new server (default is 1)"
  echo "’rollback sel’"
  echo "   Lets you select the backup from $BACKUPPATH to roll back to"
  echo "’rollback undo’"
  echo "   Undoes the last rollback"
  echo "’rollback help’"
  echo "   Displays this help"
}

# =================================== MAIN ====================================
# This is what will be processed during script invocation, since the modules 
# are only processed if called by the sections below.

# Check for RAMFS
if [ "$USE_RAMFS" = "yes" ]
  then
    RAMPATH="/dev/shm/$USE_RAMDIR"
    MCPATH="$RAMPATH"
  else MCPATH="$SERVERPATH"
fi

# Head
echo "======================= M3tal_Warriors Minecraft script ======================="
# Thank you!
echo "Special thanks for bug reporting & feature request:"
echo "* MinecraftWiki user Ben Albon for 2 reported bugs"
echo ""

case "$1" in
  start)
    mc_check
    if [ "$CHECK" ]
      then
        echo "Minecraft server already running!"
        exit 1
      else
        echo "Starting Minecraft server..."
        mc_upramfs
        mc_start
    fi
    ;;
  stop)
    mc_critcheck
    mc_stop
    mc_saveback
    ;;
  restart)
    mc_critcheck
    mc_stop
    mc_saveback
    mc_start
    ;;
  update)
    mc_update
    ;;
  binupdate)
    UPDT_STEP="3"
    mc_update
    ;;
  save)
    mc_critcheck
    if [ "$USE_RAMFS" = "yes" ]
      then
        mc_saveoff
        mc_saveback
        mc_saveon
      else 
        echo "This option is only available for RAMFS server mode!"
        exit 1
    fi
    ;;
  backup)
    mc_check
    if [ "$CHECK" ]
      then
        mc_saveoff
        mc_saveback
        mc_backup
        mc_saveon
      else mc_backup
    fi
    ;;
  rollback)
    case $2 in
      dir)
        mc_rbdir "$3"
        mc_rollback
        ;;
      last)
        mc_rblast "$3"
        mc_rollback
        ;;
      sel)
        mc_rbsel
        mc_rollback
        ;;
      undo)
        mc_rbundo
        mc_rollback
        ;;
      *)
        mc_rbhelp
        ;;
    esac
    ;;
  status)
    mc_check
    if [ "$CHECK" ]
    then
      echo "$SERVICE is running."
    else
      echo "$SERVICE is not running."
    fi
    ;;
  do)
    mc_critcheck
    shift
    if [ "$*" = "" ]
      then
        echo "What should I do? Make you a sandwich? Go to bed? Since you don't seem to know, 
I do exactly what you requested:
I will do NOTHING!
Hope you like that."
        exit 1
    fi
    mc_do "$*"
    mc_feedback
    ;;
  cronbackup)
    CRON="1"
    mc_backup
    ;;
  cronsave)
    CRON="1"
    mc_critcheck
    mc_saveoff
    mc_saveback
    mc_saveon
    ;;
  cronlog)
    CRON="1"
    mc_critcheck
    mc_newlog
    mc_clearlog
    ;;
  *)
    echo "Available commands are:"
    echo "* start       Starts the server"
    echo "* stop        Stops the server"
    echo "* restart     Restarts the server"
    echo "* update      Updates server binary and script files (root access needed!)"
    echo "* binupdate   Updates only the server binary (no root access needed)"
    echo "* save        Saves everything to disk"
    echo "* backup      Backups the server into the defined directory"
    echo "* rollback    Rolls back to a previous backup"
    echo "* status      Checks the server status (up/down)"
    echo "* do          Executes a command directly from the console"
    ;;
esac

exit 0
