#!/bin/bash
# /etc/init.d/minecraft

### BEGIN INIT INFO
# Provides:   minecraft
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Minecraft server
# Description:    Starts the minecraft server
### END INIT INFO

# ================================= Copyright =================================
# Version 1.1 (2012-01-19), Copyright (C) 2011-2012
# Author: M3tal_Warrior (http://www.minecraftwiki.net/wiki/User:M3tal_Warrior)

#   This script is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   any later version.
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

#   As this is a one file script, theres no copy of the GNU General
#   Public License distributed along with this script.
#   See <http://www.gnu.org/licenses/> for the licence text.


# DISCLAIMER: This script contains work of another person, to the current 
#             author only known as "Hound", who might claim copyright on some
#             parts of it. Everything else is covered by aforesaid statement.

# ================================= Settings ==================================
# Here you can change almost everything for the script to fill your needs.
# For more information view the commented script at 
# http://www.minecraftwiki.net/wiki/M3tal_Warrior_Server_Startup_Script

SERVICE='minecraft_server.jar'
OPTIONS='nogui'
USERNAME='metalwarrior'
WORLD='world'
# Only use RAMFS when knowing exactly what you do!
USERAMFS='yes'
# Only relevant when USERAMFS is set to 'yes'
USERAMDIR='minecraft'
SERVERPATH='/home/minecraft/server'
BACKUPPATH='/home/minecraft/backup'
CPU_COUNT=2
INVOCATION="java -Xmx1024M -Xms1024M -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalPacing -XX:ParallelGCThreads=$CPU_COUNT -XX:+AggressiveOpts -jar $SERVICE $OPTIONS"
MCUPDATEURL="https://s3.amazonaws.com/MinecraftDownload/launcher/minecraft_server.jar"

# ---------------------------------- Addons ----------------------------------- 
# Section for programs and tools that don't come naturally with the server and
# need separate installation and configuration. Note that if you don't install
# them there are some invocations of the script you won't be able to use (but
# apparently won't miss either).

ADDONPATH='/home/minecraft/tools'

# Minecraft Biome Extractor
MBEPATH="$ADDONPATH/biome-extractor"
MBESERVICE='MinecraftBiomeExtractor.jar'
MBEINVOCATION="java -jar $MBEPATH/$MBESERVICE -nogui $WORLD"

# Minecraft Overviewer
MOPATH="$ADDONPATH/overviewer"
MOSERVICE='overviewer.py'
MOSETTINGS="$MOPATH/settings.py"
MOINPATH="$SERVERPATH/$WORLD"
MOOUTPATH="$MOPATH/mcmap"
MOADMINSETTINGS="$MOPATH/admin_settings.py"
MOADMINPATH="$MOPATH/mcadminmap"

# ================================== Modules ==================================
# The script is highly modular to allow for fast and effective modification by
# the server admin. 

# --------------------- Server command processing section ---------------------
# These commands prepare for direct interaction with the minecraft server by 
# using the buildin commands. Every such module name starts with mcc_.

# Interaction (in and out) itself is processed by mcc_pipe.
mcc_pipe() {
  mc_user "screen -p 0 -S minecraft -X eval 'stuff \"$PIPE\"\015'"
  MCNOW=`date +"%Y-%m-%d %H:%M:%S"`
  sleep 1
  cat "$MCPATH/server.log" | grep "$MCNOW"
}

# Ban players
mcc_ban() {
  if [ "$VALUE1" ]
    then 
      PIPE="ban $VALUE1"
      mcc_pipe
    else
      echo "Must specify who shall be banned!"
      exit 1
  fi
}

# Ban IPs
mcc_banip() {
  if [ "$VALUE1" ]
    then 
      PIPE="ban-ip $VALUE1"
      mcc_pipe
    else
      echo "Must specify what IP shall be banned!"
      exit 1
  fi
}

# View banlists (both player and IPs)
mcc_banlist() {
  if [[ "$VALUE1" = "ips" ]]
    then PIPE="banlist ips"
  elif [[ "$VALUE1" = "" ]]
    then PIPE="banlist"
    else 
      echo "No such command!"
      exit 1
  fi
  mcc_pipe
}

# Deop an operator
mcc_deop() {
  if [ "$VALUE1" ]
    then 
      PIPE="deop $VALUE1"
      mcc_pipe
    else
      echo "Must specify who to deop!"
      exit 1
  fi
}

# Change gamemode for named player
mcc_gamemode() {
  if [ "$VALUE1" ]
    then 
      if [ "$VALUE2" ]
        then 
          PIPE="gamemode $VALUE1 $VALUE2"
          mcc_pipe
        else
          echo "Must specify the gamemode (0/1)!"
          exit 1
      fi
    else
      echo "Must specify for whom the gamemode shall be changed!"
      exit 1
  fi
}

# Give named player an (theoretically) unlimited number of items/blocks with
# given damage value. Note: If you type in 2 damage values, the script will 
# give the player for every damage value within the range the number of items/
# blocks chosen. It does NOT check if those exist! BE CAREFUL!
mcc_give() {
  if [ "$VALUE1" ]
    then   
      if [ "$VALUE2" ]
        then
          if [[ "$VALUE3" = "" ]]
            then VALUE3="1"
          fi
        else 
          echo "Must specify what shall be given!"
          exit 1   
      fi  
    else 
      echo "Must specify to whom shall be given!"
      exit 1
  fi
  MULT=`expr $VALUE3 / 64`
  REST=`expr $VALUE3 % 64`
  while [[ "$MULT" -ge "0" ]]
    do
      if [[ "$MULT" = "0" ]]
        then VALUE3="$REST"
        else VALUE3="64"
      fi
      MULT=`expr $MULT - 1`
      if [ "$VALUE4" ]
        then
          if [ "$VALUE5" ]
	    then 
              DAMAGE="$VALUE4"
              while [[ "$DAMAGE" -le "$VALUE5" ]]
                do
                  PIPE="give $VALUE1 $VALUE2 $VALUE3 $DAMAGE"
                  mcc_pipe
                  DAMAGE=`expr $DAMAGE + 1`
                done
            else 
              PIPE="give $VALUE1 $VALUE2 $VALUE3 $VALUE4"
              mcc_pipe
          fi
        else
          PIPE="give $VALUE1 $VALUE2 $VALUE3"
          mcc_pipe
      fi
    done
}

# Displays every command available
mcc_help() {
  echo "Available commands are:\n"
  echo '* ban <player>'
  echo '* ban-ip <IP-address>'
  echo '* banlist'
  echo '* banlist ips'
  echo '* deop <player>'
  echo '* gamemode <player> <0|1>'
  echo '* give <player> <data-value> [<amount>]'
  echo '       [<damage-value [begin]>] [<damage-value [end]>]'
  echo '* help (shows you this list)'
  echo '* kick <player>'
  echo '* list'
  echo '* op <player>'
  echo '* pardon <player>'
  echo '* pardon-ip <IP-address>'
  echo '* save-all'
  echo '* save-off'
  echo '* save-on'
  echo '* say <"message">'
  echo '* stop'
  echo '* tell <player> <"message">'
  echo '* time <set|add> <number>'
  echo '* toggledownfall'
  echo '* tp <player> <destination player>'
  echo '* whitelist <add|remove> <player>'
  echo '* whitelist <list>'
  echo '* whitelist <on|off>'
  echo '* whitelist <reload>'
  echo '* xp <player> <amount>'
  echo "\nSee http://www.minecraftwiki.net/wiki/SMP_Server_commands for info"
}

# Kick named player from the server
mcc_kick() {
  if [ "$VALUE1" ]
    then 
      PIPE="kick $VALUE1"
      mcc_pipe
    else
      echo "Must specify who to kick!"
      exit 1
  fi
}

# List all players currently connected to the server
mcc_list() {
  PIPE="list"
  mcc_pipe
}

# Promote player to operator
mcc_op() {
  if [ "$VALUE1" ]
    then
      PIPE="op $VALUE1"
      mcc_pipe
    else
      echo "Must specify who to op!"
      exit 1
  fi
}

# Pardon a formerly banned player
mcc_pardon() {
  if [ "$VALUE1" ]
    then 
      PIPE="pardon $VALUE1"
      mcc_pipe
    else
      echo "Must specify who to pardon!"
      exit 1
  fi
}

# Pardon a formerly banned IP
mcc_pardonip() {
  if [ "$VALUE1" ]
    then 
      PIPE="pardon-ip $VALUE1"
      mcc_pipe
    else
      echo "Must specify which IP to pardon!"
      exit 1
  fi
}

# Save all changes to the server files
mcc_saveall() {
  PIPE="save-all"
  mcc_pipe
}

# Prohibit the server saving to its files
mcc_saveoff() {
  PIPE="save-off"
  mcc_pipe
}

# Allow the server saving to its files
mcc_saveon() {
  PIPE="save-on"
  mcc_pipe
}

# Sends a pink server message out
mcc_say() {
  if [ "$VALUE1" ]
    then 
      PIPE="say $VALUE1"
      mcc_pipe
    else
      echo "Must specify what to say!"
      exit 1
  fi
}

# Gracefully shuts down the server
mcc_stop() {
  PIPE="stop"
  mcc_pipe
}

# Whisper a message to named player
mcc_tell() {
  if [ "$VALUE1" ]
    then 
      if [ "$VALUE2" ]
        then 
          PIPE="tell $VALUE1 $VALUE2"
          mcc_pipe
        else
          echo "Must specify what to whisper!"
          exit 1
      fi
    else
      echo "Must specify whom to whisper to!"
      exit 1
  fi
}

# Modify ingame time
mcc_time() {
  if [ "$VALUE1" ]
    then
      if [ "$VALUE2" ]
        then 
          PIPE="time $VALUE1 $VALUE2"
          mcc_pipe
        else
          echo "Must specify the amount of time!"
          exit 1
      fi
    else
      echo "Must specify what to do!"
      exit 1
  fi
}

# Toggle rain/snow and sunshine
mcc_toggledf() {
  PIPE="toggledownfall"
  mcc_pipe
}

# Teleport one player to another player
mcc_tp() {
  if [ "$VALUE1" ]
    then 
      if [ "$VALUE2" ]
        then 
          PIPE="tp $VALUE1 $VALUE2"
          mcc_pipe
        else
          echo "Must specify to whom to teleport!"
          exit 1
      fi
    else
      echo "Must specify whom to teleport!"
      exit 1
  fi
}

# Managing the whitelist
mcc_whitelist() {
  if [[ "$VALUE1" = "add" || "$VALUE1" = "remove" ]]
    then 
      if [ "$VALUE2" ] 
        then PIPE="whitelist $VALUE1 $VALUE2"
        else
          echo "Must specify who to add/remove from whitelist!"
          exit 1
      fi
  elif [[ "$VALUE1" = "on" || "$VALUE1" = "off" ]]
    then PIPE="whitelist $VALUE1"
  elif [[ "$VALUE1" = "reload" || "$VALUE1" = "list" ]]
    then PIPE="whitelist $VALUE1"
    else
      echo "Must specify what you want to do with your whitelist!"
      exit 1
  fi
  mcc_pipe
}

# Gives named player a defined amount of experience orbs
mcc_xp() {
  if [ "$VALUE1" ]
    then 
      if [[ "$VALUE2" = "" ]]
        then
          echo "Must specify the amount of xp!"
          exit 1
      fi
    else
      echo "Must specify whom to give xp!"
      exit 1
  fi
  MULT=`expr $VALUE2 / 5000`
  REST=`expr $VALUE2 % 5000`
  while [[ "$MULT" -ge "0" ]]
    do
      if [[ "$MULT" = "0" ]]
        then VALUE2="$REST"
        else VALUE2="5000"
      fi
      MULT=`expr $MULT - 1`
      PIPE="give $VALUE1 $VALUE2"
      mcc_pipe
    done
  exit 0
}

# --------------------- General command processing section --------------------
# These modules are for managing the server itself and its environment. Some of
# them use the modules above, but not all of them. Every module in here has mc_
# as prefix.

# Ensures the minecraft server and its commands to always run as a certain user
# defined in this script (see settings section at the top)
mc_user() {
  if [ $ME == $USERNAME ] ; then
    bash -c "$1"
  else
    su - $USERNAME -c "$1"
  fi
}

# Checks if the server is running
mc_check() {
  if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
    then CHECK="1"
    else CHECK=""
  fi
}

# Manages the RAMFS option
mc_upramfs() {
  if [ $USERAMFS == 'yes' ]
    then
      mkdir -p $RAMPATH
      echo "Copying files to RAMFS..."
      rsync --stats -rlpthu $SERVERPATH/ $RAMPATH
      echo "Done."
  fi
}

# Starts the server 
mc_start() {
  echo "Starting $SERVICE..."
  cd $MCPATH
  mc_user "screen -dmS minecraft $INVOCATION"
  sleep 7
  mc_check
  if [ "$CHECK" ]
    then
      echo "$SERVICE is now running."
    else
      echo "Error! Could not start $SERVICE!"
      exit 1
  fi
}

# Disables the server saving to its files
mc_saveoff() {
  if [ "$CRON" != "1" ]
    then
      echo "$SERVICE is running... suspending saves"
      VALUE1="Server going readonly..."
      mcc_say
  fi
  mcc_saveoff
  mcc_saveall
  sync
  sleep 10
}

# Enables the server saving to its files
mc_saveon() {
  if [ "$CRON" != "1" ]
    then 
      echo "$SERVICE is running... re-enabling saves"
      VALUE1="Server going read-write..."
      mcc_say
  fi
  mcc_saveon
}

# Shuts the server down
mc_stop() {
  mc_check
  if [ "$CHECK" ]
    then
      echo "Stopping $SERVICE"
      VALUE1="SERVER SHUTTING DOWN IN 10 SECONDS."
      mcc_say
      mcc_saveall
      sleep 10
      mcc_stop
      sleep 7
    else
      echo "$SERVICE was not running."
  fi
  mc_check
  if [ "$CHECK" ]
    then
      echo "Error! $SERVICE could not be stopped."
      exit 1
    else
      echo "$SERVICE is stopped."
  fi
  sync
}

# Writes the files in RAMFS back to harddisk
mc_saveback() {
  if [ "$USERAMFS" == "yes" ]
    then
      echo "Saving files to Harddisk..."
      rsync -rlpthu $RAMPATH/ $SERVERPATH
      echo "Done."
  fi
}

# Copys the harddisk files to a backup folder
mc_backup() {
  if [ "$CRON" != "1" ]
    then
      echo "Backing up minecraft server..."
  fi
  mc_user "rsync -rlpthu $SERVERPATH/ $BACKUPPATH/server_`date "+%Y.%m.%d_%H.%M"`"
  if [ "$CRON" != "1" ]
    then
      echo "Backup complete!"
  fi
}

# Copys the server.log for further processing and clears it afterwards
mc_newlog() {
  if [ "$CHECK" ]
    then
      cd $MCPATH
      cp server.log server.log.tmp
      echo -n "" > server.log
  fi
}

# Processes the server.log copy into specialized logfiles
mc_clearlog() {
  cd $MCPATH
  if [ -f server.log.tmp ]
    then 
      cat server.log.tmp | grep -v "94.231.101.83" | \
        grep -v "CONSOLE: Disabling level saving.." | \
        grep -v "CONSOLE: Forcing save.." | \
        grep -v "CONSOLE: Save complete." | \
        grep -v "CONSOLE: Enabling level saving.." > server.log.old
      cat server.log.tmp | grep "not white-listed" >> forbidden.log
      cat server.log.tmp | grep "WARNING" >> warnings.log
      rm server.log.tmp
  fi
}

# Updates the client
mc_update() {
  cd $MCPATH
  mc_user "wget -q -O update.tmp $MCUPDATEURL"
  if [ -f update.tmp ]
    then 
      if `diff $SERVICE update.tmp > /dev/null`
        then
          echo "You are already running the latest version of $SERVICE."
          rm update.tmp
        else
          mc_stop
          mc_saveback
          mc_backup
          mc_user "mv update.tmp $SERVICE"
          mc_start
          echo "Minecraft successfully updated."
      fi
    else echo "Minecraft update could not be downloaded."
  fi
}

# Tests for the command module to use for server commands
mc_command() {
  if [ "$CHECK" ]
    then
      COMMAND="$1"
      VALUE1="$2"
      VALUE2="$3"
      VALUE3="$4"
      VALUE4="$5"
      VALUE5="$6"
      if [[ "$COMMAND" = "ban" ]]
        then
          mcc_ban
      elif [[ "$COMMAND" = "ban-ip" ]]
        then
          mcc_banip
      elif [[ "$COMMAND" = "banlist" ]]
        then
          mcc_banlist
      elif [[ "$COMMAND" = "deop" ]]
        then
          mcc_deop
      elif [[ "$COMMAND" = "gamemode" ]]
        then
          mcc_gamemode
      elif [[ "$COMMAND" = "give" ]]
        then
          mcc_give
      elif [[ "$COMMAND" = "help" ]]
        then
          mcc_help
      elif [[ "$COMMAND" = "kick" ]]
        then
          mcc_kick
      elif [[ "$COMMAND" = "op" ]]
        then
          mcc_op
      elif [[ "$COMMAND" = "pardon" ]]
        then
          mcc_pardon
      elif [[ "$COMMAND" = "pardon-ip" ]]
        then
          mcc_pardonip
      elif [[ "$COMMAND" = "save-all" ]]
        then
          mcc_saveall
      elif [[ "$COMMAND" = "save-off" ]]
        then
          mcc_saveoff
      elif [[ "$COMMAND" = "save-on" ]]
        then
          mcc_saveon
      elif [[ "$COMMAND" = "say" ]]
        then
          mcc_say
      elif [[ "$COMMAND" = "stop" ]]
        then
          mcc_stop
      elif [[ "$COMMAND" = "tell" ]]
        then
          mcc_tell
      elif [[ "$COMMAND" = "time" ]]
        then
          mcc_time
      elif [[ "$COMMAND" = "toggledownfall" ]]
        then
          mcc_toggledf
      elif [[ "$COMMAND" = "tp" ]]
        then
          mcc_tp
      elif [[ "$COMMAND" = "whitelist" ]]
        then
          mcc_whitelist
      elif [[ "$COMMAND" = "xp" ]]
        then
          mcc_xp
        else
          echo "No such command available!"
          exit 1
      fi
    else 
      echo "Service not running!"
      exit 1
  fi
}

# ---------------------- Addon command processing section ---------------------
# Modules for addon management

# Minecraft Biome Extractor
mc_biomes() {
  cd $SERVERPATH
  $MBEINVOCATION
}

# Minecraft Overviewer (Google Maps)
mc_map() {
  $MOSERVICE --settings $MOSETTINGS $MOINPATH $MOOUTPATH
}
mc_adminmap() {
  $MOSERVICE --settings $MOADMINSETTINGS $MOINPATH $MOADMINPATH
}

# =================================== MAIN ====================================
# This is what will be processed during script invocation, since the modules 
# are only processed if called by the sections below.

# Questioning name of invocating user
ME=`whoami`

# Check for RAMFS
if [[ "$USERAMFS" == "yes" ]]
  then
    RAMPATH="/dev/shm/$USERAMDIR"
    MCPATH="$RAMPATH"
  else MCPATH="$SERVERPATH"
fi

case "$1" in
  start)
    mc_check
    if [ "$CHECK" ]
      then
        mc_upramfs
        mc_start
      else
        echo "Service already running!"
        exit 1
    fi
    ;;
  stop)
    mc_stop
    mc_saveback
    ;;
  restart)
    mc_stop
    mc_saveback
    mc_start
    ;;
  update)
    mc_update
    ;;
  save)
    if [ "$USERAMFS" == "yes" ]
      then
        mc_saveoff
        mc_saveback
        mc_saveon
      else 
        echo "This option is only available for RAMFS server mode!"
        exit 1
    fi
    ;;
  backup)
    mc_saveoff
    mc_saveback
    mc_backup
    mc_saveon
    ;;
  status)
    mc_check
    if [ "$CHECK" ]
    then
      echo "$SERVICE is running."
    else
      echo "$SERVICE is not running."
    fi
    ;;
  command)
    mc_check
    mc_command "$2" "$3" "$4" "$5" "$6" "$7"
    ;;
  cronbackup)
    CRON="1"
    mc_backup
    ;;
  cronsave)
    CRON="1"
    mc_saveoff
    mc_saveback
    mc_saveon
    ;;
  cronupdtmap)
    CRON="1"
    if ps -e | grep overviewer.py > /dev/null
	then exit 0
	else 
          mc_biomes
	  mc_map
    fi
    ;;
  cronupdtadminmap)
    CRON="1"
    if ps -e | grep overviewer.py > /dev/null
        then exit 0
        else 
          mc_biomes
          mc_adminmap
    fi
    ;;
  cronlog)
    CRON="1"
    mc_newlog
    mc_clearlog
    ;;
  *)
    echo "Usage: /etc/init.d/minecraft {start|stop|save|update|backup|status|restart|command \"server command\"}"
    exit 1
    ;;
esac

exit 0
